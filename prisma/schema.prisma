// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  username          String        @unique
  firstname         String?
  lastname          String?
  email             String        @unique
  country           String?
  emailVerified     DateTime?
  image             String?
  sessions          Session[]
  password          String?
  phone             String?
  referrerId        String?       @db.ObjectId
  createdAt         DateTime      @default(now())
  ancestorsIds      String[]
  leftReferralsIds  String[]
  rightReferralsIds String[]
  position          String?
  balance           Float         @default(0)
  deposited         Float         @default(0)
  withdrawn         Float         @default(0)
  transactions      Transaction[]
  planId            String?
  plan              Plan?         @relation(fields: [planId], references: [id])
}

model Plan {
  id                 String   @id @default(cuid()) @map("_id")
  name               String   @unique
  description        String?
  price              Float
  treeCommission     Float
  referralCommission Float
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  users              User[]
}

model Transaction {
  id            String   @id @default(cuid()) @map("_id")
  userId        String   @db.ObjectId
  amount        Float
  type          String
  status        String   @default("pending")
  method        String?
  account       String?
  accountNumber String?
  imageUrl      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
